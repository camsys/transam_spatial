:ruby 
  markers = []
  if @assets.count <= Rails.application.config.max_num_map_objects.to_i
    @assets.each do |a|
      asset = Asset.get_typed_asset(a)
      if asset.mappable?
        markers << asset.map_marker_without_popup
      end
    end

    markers = markers.to_json
  else
    @max_assets_on_map_reached = true
  end

:javascript
  $(function() {
    // store the map object for convienience
    var map = leaflet_tools.map();
    var markers_layer;

    // More customization in the map providing more tools
    var locate_option = #{(Rails.application.config.transam_spatial_map_options.include? "locate").to_s};
    var marker_cluster_option = #{(Rails.application.config.transam_spatial_map_options.include? "marker_cluster").to_s};
    var full_screen_option = #{(Rails.application.config.transam_spatial_map_options.include? "full_screen").to_s};
    var draw_option = #{(Rails.application.config.transam_spatial_map_options.include? "draw").to_s};
    
    if (locate_option) {
      // Allow the user to locate themselves on the map using the HTML 5 fuctions
      var location_control = new L.control.locate().addTo(map);
    }

    if (marker_cluster_option) {
      // Enable marker clusters
      markers_layer = new L.markerClusterGroup();
    } else {
      markers_layer = new L.featureGroup();
    }
    map.addLayer(markers_layer);

    if (full_screen_option) {
      // Allow the user to go full screen if the browser supports it
      var full_screen_control = new L.control.fullscreen().addTo(map);
    }

    if (draw_option) {
      // Add a feature groups for selecting
      var featureGroup = L.featureGroup().addTo(map);

      var drawControl = new L.Control.Draw({
        edit: {
          featureGroup: featureGroup
        }
      }).addTo(map);

      map.on('draw:created', function(e) {
          featureGroup.addLayer(e.layer);
      });
    }

    // Add the mouse position plugin
    L.control.mousePosition().addTo(map);

    // draw markers
    function draw_markers() {
      var arr = #{markers || []};
      for(var i=0;i < arr.length;i++){
        var obj = arr[i];
        if (obj.lat == null || obj.lng == null) {
          continue;
        }
        var id = obj.id;
        var lat = obj.lat;
        var lng = obj.lng;
        var iconClass = obj.iconClass;
        var popupText = obj.description;
        var title = obj.title;
        var zindex = obj.zindex;
        var open = false;
        if (obj.open) {
          open = obj.open;
        }
        var draggable = obj.draggable;
        markers_layer.addLayer(leaflet_tools.create_marker(id, lat, lng, iconClass, popupText, title, open, draggable, zindex));
      }
    }
    draw_markers();

    if(markers_layer.getLayers().length > 0) {
      map.fitBounds(markers_layer.getBounds());
    }

    // Zoom to and show the popup for the selected marker
    function show_popup_for_selected(marker) {
      // See if this marker has a popup cached, if not then we perform an ajax
      // query to get the popup content and bind it to the marker
      var popup = marker._popup;
      marker.unbindPopup();
      // get the correct URL based on the feature class
      var url = "#{map_popup_map_path('xxx')}";
      url = url.replace('xxx', marker.id);
    
      // Use a call back to get the popup text
      $.ajax({
        url: url,
        type: 'get',
        dataType: 'json',
        success: function(result) {
          if(result) {
            marker.bindPopup(result, {autoPanPaddingTopLeft: new L.Point(60, 60)});
            // called here so there are no latency lags
            marker.openPopup();
          } else {
            marker.bindPopup(popup);
            marker.openPopup();
          }
        },
        error: function (xhr, ajaxOptions, thrownError) {
          marker.bindPopup(popup);
          marker.openPopup();
        }
      });
    };

    // Bind a popup handler
    markers_layer.on('click', function(e){
      show_popup_for_selected(e.layer);
    });

    // Show or hide map container
    var _assets_map_toggle_key_var = '_assets_map_toggle_key_var';

    function show_or_hide_assets_map(val) {
      if (val === undefined || val == null || val == '0') {
        $('.assets-map-container').hide();
        $('#show_hide_assets_map').find('.text').text('Show on map');
      } else {
        $('.assets-map-container').show();
        $('#show_hide_assets_map').find('.text').text('Hide map');
        map.invalidateSize();

        if(#{@max_assets_on_map_reached == true}) {
          bootbox.alert('Too many elements to display on the map.');
        }
      }
    };

    show_or_hide_assets_map(transam.get_ui_key_value(_assets_map_toggle_key_var));
    $('#show_hide_assets_map').on('click', function(e) {
      // Get the current value and switch it then perform the action
      var val = (transam.get_ui_key_value(_assets_map_toggle_key_var) == '1') ? '0' : '1';
      transam.set_ui_key_value(_assets_map_toggle_key_var, val);
      show_or_hide_assets_map(val);
    });

  });