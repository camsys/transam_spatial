:javascript
  var added_basemaps = {};
  var added_overlays = {};
  var added_asset_layers = {};

  function show_modal(title, message, callback) {
    var map = leaflet_tools.map();
    map.fire('modal', {
      title: title,
      content: message,
      template: ['<div class="modal-header"><h4 class="modal-title">{title}</h4></div>',
        '<div class="modal-body">{content}</div>',
        '<div class="modal-footer">',
        '<button class="btn btn-primary {OK_CLS}">{okText}</button>',
        '<button class="btn btn-default {CANCEL_CLS}">{cancelText}</button>',
        '</div>'
      ].join(''),

      okText: 'Add',
      cancelText: 'Cancel',
      OK_CLS: 'modal-ok',
      CANCEL_CLS: 'modal-cancel',

      width: 600,

      onShow: function(evt) {
        var modal = evt.modal;
        L.DomEvent
          .on(modal._container.querySelector('.modal-ok'), 'click', function() {
            callback();
            modal.hide();
          })
          .on(modal._container.querySelector('.modal-cancel'), 'click', function() {
            modal.hide();
          });
      }
    });
  }

  function process_new_basemap(type, label) {
    var map = leaflet_tools.map();
    if(!map) {
      return;
    }

    var new_basemap;
    if(type == 'esri_streets') {
      new_basemap = L.esri.basemapLayer('Streets').addTo(map);
    } else if(type == 'esri_satellite') {
      new_basemap = L.esri.basemapLayer('Imagery').addTo(map);
    } else if(type == 'esri_topo') {
      new_basemap = L.esri.basemapLayer('Topographic').addTo(map);
    }

    if(new_basemap && leaflet_tools.layerControl) {
      // remove other basemaps
      for(var t in added_basemaps) {
        var layer = added_basemaps[t];
        if(layer) {
          map.removeLayer(layer);

          delete added_basemaps[type];
        }
      }
      
      added_basemaps[type] = new_basemap;
    }
  }

  function show_new_overlay_form(type) {
    var title = "Add Overlay";
    if(type == "esri_map") {
      title = "Add Esri Map Service"
    } else if(type == "esri_feature") {
      title = "Add Esri Feature Service"
    }

    var message = '<div class="row">  ' +
          '<div class="col-md-12 form-group"> ' +
          '<label>Name:</label>' +
          '<input class="form-control" type="text" id="new_overlay_name"/> ' +
          '<label>URL:</label>' +
          '<input class="form-control" type="text" id="new_overlay_url"/> ' +
          '</div></div>';
    var callback = function() {
      process_new_overlay(type, $($('#new_overlay_url')).val(), $('#new_overlay_name').val());
    };

    show_modal(title, message, callback);
  }

  function append_overlay_item(type, layer_name, key) {
    $('#overlay_' + type + " ul").append('<li class="list-group-item"><span class="pull-right"><button class="btn btn-xs btn-danger remove_overlay" data-key=' + key + '><i class="fa fa-times"></i></button></span>' + layer_name + '</li>');
  }

  function process_new_overlay(type, url, name) {
    if(!url || !name || !url.trim() || !name.trim()) {
      return;
    }

    var map = leaflet_tools.map();
    var overlay;
    var group_name;
    if(type == 'esri_map') {
      overlay = L.esri.dynamicMapLayer({
        url: url,
        opacity: 0.7
      }).addTo(map).bringToBack();
    } else if(type == 'esri_feature') {
      overlay = L.esri.featureLayer({
        url: url
      }).addTo(map);

      overlay.on('click', function (e) {
        var ly = e.layer;
        if(!ly._popup) {
          var template = '<div style="max-height: 200px; overflow: auto;"><table><tbody>';
          for(var k in ly.feature.properties) {
            var val = ly.feature.properties[k];
            template += "<tr><td style='text-align: right; font-weight: bold;'>" + k + ":</td><td style='text-align:left; padding-left: 10px;'>" + val.toString() +"</td></tr>"
          }
          template += "</table></div>"
          ly.bindPopup(template);
        }
        ly.openPopup();
      });
    }

    if(overlay && leaflet_tools.layerControl) {
      leaflet_tools.layerControl.addOverlay(overlay, name, 'Overlay');
      var key = overlay._leaflet_id;
      added_overlays[key.toString()] = overlay;
      append_overlay_item(type, name, key);
    }
  }

  function process_asset_layer(layer_id, asset_type, asset_subtypes, layer_name) {
    var search_data = {
      asset_type_id: [asset_type],
      asset_subtype_id: asset_subtypes || []
    }
    var checkboxes = $(".asset_type_layer[data-type=" + asset_type + "]").parents('.asset_type_panel').find('input[type=checkbox]');
    checkboxes.attr('disabled', 'disabled');
    $.ajax({
      url: "#{geojson_map_searches_path(format: :json)}",
      method: 'POST',
      data: {
        search_type: "#{SearchesController::ASSET_SEARCH_TYPE}",
        searcher: search_data
      },
      success: function(geojson_data) {
        load_asset_layer(layer_id, geojson_data, layer_name);
      },
      complete: function() {
        checkboxes.removeAttr('disabled');
      }
    });
  }

  function show_popup_for_selected(marker) {
    var popup = marker._popup;
    marker.unbindPopup();
    var url = "#{map_popup_map_path('xxx')}";
    url = url.replace('xxx', marker.id);
  
    $.ajax({
      url: url,
      type: 'get',
      dataType: 'json',
      success: function(result) {
        if(result) {
          marker.bindPopup(result, {autoPanPaddingTopLeft: new L.Point(60, 60)});
          marker.openPopup();
        } else {
          marker.bindPopup(popup);
          marker.openPopup();
        }
      },
      error: function (xhr, ajaxOptions, thrownError) {
        marker.bindPopup(popup);
        marker.openPopup();
      }
    });
  };

  function load_asset_layer(layer_id, geojson_data, layer_name) {
    var map = leaflet_tools.map();
    var markers_layer = added_asset_layers[layer_id];
    var is_loaded = markers_layer || false;
    var marker_cluster_option = #{ Rails.application.config.transam_spatial_map_options.include?("marker_cluster") || false };
    var geoJsonLayer = L.geoJson(geojson_data, {
      pointToLayer: function (feature, latlng) {
        return leaflet_tools.create_marker(feature.properties['id'], latlng.lat, latlng.lng);
      }
    });

    if(is_loaded) {
      // reload data
      markers_layer.clearLayers();

      if (marker_cluster_option) {
        markers_layer.addLayer(geoJsonLayer);
      } else {
        markers_layer.addData(geojson_data);
      }
    } else {
      if (marker_cluster_option) {
        markers_layer = new L.markerClusterGroup();
        markers_layer.addLayer(geoJsonLayer);
      } else {
        markers_layer = geoJsonLayer;
      }
      map.addLayer(markers_layer);

      markers_layer.on('click', function(e){
        show_popup_for_selected(e.layer);
      });

      if(leaflet_tools.layerControl) {
        leaflet_tools.layerControl.addOverlay(markers_layer, layer_name, 'Assets');
        added_asset_layers[layer_id] = markers_layer;
      }
    }

    if(markers_layer.getLayers().length > 0) {
      map.fitBounds(markers_layer.getBounds());
    }
  }

  $(function() {
    var map = leaflet_tools.map();

    // Add/remove basemap layer
    $('.basemap_layer').on('change', function() {
      var type = $(this).data('type');
      var label = $(this).data('label');
      if($(this).is(":checked")) {
        process_new_basemap(type, label);
      }
    });

    // Add overlay
    $('.add_overlay').on('click', function() {
      show_new_overlay_form($(this).data('type'));
    });

    $('#overlay_list').on('click', '.remove_overlay', function() {
      var key = $(this).data('key');
      var layer = added_overlays[key];
      if(layer) {
        leaflet_tools.layerControl.removeLayer(layer);
        map.removeLayer(layer);
        $(this).parents('.list-group-item').remove();

        delete added_overlays[key];
      }
    });

    // Add/remove asset layer
    $('.asset_type_layer').on('change', function() {
      var asset_type = $(this).data('type');
      var label = $(this).data('label');
      var layer_id = "asset_" + asset_type;

      if($(this).is(":checked")) {
        $(this).parent('label').css('font-weight', 'bold');
        $(this).parents('.asset_type_panel').find('.asset_subtype_layer').prop('checked', true);

        var asset_subtypes = [];
        $(this).find('.asset_subtype_layer').each(function() {
          if($(this).is(':checked')) {
            asset_subtypes.push($(this).data('type'));
          }
        });
        process_asset_layer(layer_id, asset_type, asset_subtypes, label);
      } else {
        $(this).parent('label').css('font-weight', 'normal');
        $(this).parents('.asset_type_panel').find('.asset_subtype_layer').prop('checked', false);

        var layer = added_asset_layers[layer_id];
        if(layer) {
          leaflet_tools.layerControl.removeLayer(layer);
          map.removeLayer(layer);

          delete added_asset_layers[layer_id];
        }
      }
    });

    $('.asset_subtype_layer').on('change', function() {
      var asset_type_node = $(this).parents('.asset_type_panel').find('.asset_type_layer');
      var asset_type = asset_type_node.data('type');
      var label = asset_type_node.data('label');
      var layer_id = "asset_" + asset_type;

      if($(this).is(":checked")) {
        asset_type_node.prop('checked', true);
        asset_type_node.parent('label').css('font-weight', 'bold');
      } 

      var asset_subtypes = [];
      asset_type_node.parents('.asset_type_panel').find('.asset_subtype_layer').each(function() {
        if($(this).is(':checked')) {
          asset_subtypes.push($(this).data('type'));
        }
      });

      process_asset_layer(layer_id, asset_type, asset_subtypes, label);
    });

  });