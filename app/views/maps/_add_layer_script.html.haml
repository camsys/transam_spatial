:javascript
  var added_basemaps = {};
  var added_overlays = {};
  var added_asset_layers = {};

  function show_bootbox_modal(title, message, callback) {
    bootbox.dialog({
      title: title,
      message: message,
      buttons: {
        cancel: {
          label: 'Cancel',
          className: "btn-default"
        },
        success: {
          label: "Submit",
          className: "btn-success",
          callback: callback
        }
      }
    });
  }

  function show_dropdown_dialog(title, label, select_el_id, options, callback) {
    var option_str = '';
    for(var val in options) {
      option_str += '<option value=' + val + '>' + options[val] + '</option>';
    }

    var message = '<div class="row">  ' +
          '<div class="col-md-12 form-group"> ' +
          '<label>' + label + ':</label>' +
          '<select class="form-control" id="' + select_el_id + '"> ' +
          option_str +
          ' </select>' +
          '</div></div>';

    show_bootbox_modal(title, message, callback);
  }

  function process_new_basemap(type, label) {
    var map = leaflet_tools.map();
    if(!map) {
      return;
    }

    var new_basemap;
    if(type == 'esri_streets') {
      new_basemap = L.esri.basemapLayer('Streets').addTo(map);
    } else if(type == 'esri_satellite') {
      new_basemap = L.esri.basemapLayer('Imagery').addTo(map);
    } else if(type == 'esri_terrain') {
      new_basemap = L.esri.basemapLayer('Terrain').addTo(map);
    }

    if(new_basemap && leaflet_tools.layerControl) {
      leaflet_tools.layerControl.addBaseLayer(new_basemap, label);
      
      added_basemaps[type] = new_basemap;
    }
  }

  function show_new_overlay_form(type) {
    var title = "Add Overlay";
    if(type == "esri_map") {
      title = "Add Esri Map Service"
    } else if(type == "esri_feature") {
      title = "Add Esri Feature Service"
    }

    var message = '<div class="row">  ' +
          '<div class="col-md-12 form-group"> ' +
          '<label>Name:</label>' +
          '<input class="form-control" type="text" id="new_overlay_name"/> ' +
          '<label>URL:</label>' +
          '<input class="form-control" type="text" id="new_overlay_url"/> ' +
          '</div></div>';
    var callback = function() {
      process_new_overlay(type, $($('#new_overlay_url')).val(), $('#new_overlay_name').val());
    };

    show_bootbox_modal(title, message, callback);
  }

  function process_new_overlay(type, url, name) {
    var map = leaflet_tools.map();
    var overlay;
    if(type == 'esri_map') {
      overlay = L.esri.dynamicMapLayer({
        url: url,
        opacity: 0.7
      }).addTo(map).bringToBack();
    } else if(type == 'esri_feature') {
      overlay = L.esri.featureLayer({
        url: url
      }).addTo(map);
    }

    if(overlay && leaflet_tools.layerControl) {
      leaflet_tools.layerControl.addOverlay(overlay, name);
      added_overlays[type] = overlay._leaflet_id;
    }
  }

  function process_new_asset_layer(layer_name, type, type_id) {
    var search_data = {}

    var layer_id;
    if(type == 'asset_type') {
      search_data.asset_type_id = [type_id]
      layer_id = "asset_type_" + type_id;
    } else if(type == 'asset_subtype') {
      search_data.asset_subtype_id = [type_id]
      layer_id = "asset_subtype_" + type_id;
    }

    $.ajax({
      url: "#{geojson_map_searches_path(format: :json)}",
      method: 'POST',
      data: {
        search_type: "#{SearchesController::ASSET_SEARCH_TYPE}",
        searcher: search_data
      },
      success: function(geojson_data) {
        load_asset_layer(geojson_data, layer_name, layer_id);
      }
    });
  }

  function show_popup_for_selected(marker) {
    var popup = marker._popup;
    marker.unbindPopup();
    var url = "#{map_popup_map_path('xxx')}";
    url = url.replace('xxx', marker.id);
  
    $.ajax({
      url: url,
      type: 'get',
      dataType: 'json',
      success: function(result) {
        if(result) {
          marker.bindPopup(result, {autoPanPaddingTopLeft: new L.Point(60, 60)});
          marker.openPopup();
        } else {
          marker.bindPopup(popup);
          marker.openPopup();
        }
      },
      error: function (xhr, ajaxOptions, thrownError) {
        marker.bindPopup(popup);
        marker.openPopup();
      }
    });
  };

  function load_asset_layer(geojson_data, layer_name, layer_id) {
    var map = leaflet_tools.map();
    var markers_layer;

    var marker_cluster_option = #{ Rails.application.config.transam_spatial_map_options.include?("marker_cluster") || false };

    var geoJsonLayer = L.geoJson(geojson_data, {
      pointToLayer: function (feature, latlng) {
        return leaflet_tools.create_marker(feature.properties['id'], latlng.lat, latlng.lng);
      }
    });

    if (marker_cluster_option) {
      markers_layer = new L.markerClusterGroup();
      markers_layer.addLayer(geoJsonLayer);
    } else {
      markers_layer = geoJsonLayer;
    }
    map.addLayer(markers_layer);

    markers_layer.on('click', function(e){
      show_popup_for_selected(e.layer);
    });

    if(leaflet_tools.layerControl) {
      leaflet_tools.layerControl.addOverlay(markers_layer, layer_name);
      added_asset_layers[layer_id] = markers_layer;
    }

    if(markers_layer.getLayers().length > 0) {
      map.fitBounds(markers_layer.getBounds());
    }
  }

  $(function() {
    var map = leaflet_tools.map();

    // Add/remove basemap layer
    $('.basemap_layer').on('change', function() {
      var type = $(this).data('type');
      var label = $(this).data('label');
      if($(this).is(":checked")) {
        process_new_basemap(type, label);
      } else {
        var layer = added_basemaps[type];
        if(layer) {
          leaflet_tools.layerControl.removeLayer(layer);
          map.removeLayer(layer);

          delete added_basemaps[type];
        }
      }
    });

    // Add/remove asset layer
    $('.asset_type_layer, .asset_subtype_layer').on('change', function() {
      var type = $(this).data('type');
      var key = $(this).data('key');
      var label = $(this).data('label');
      if($(this).is(":checked")) {
        process_new_asset_layer(label, type, key);
      } else {
        var layer_id = type + "_" + key;
        var layer = added_asset_layers[layer_id];
        if(layer) {
          leaflet_tools.layerControl.removeLayer(layer);
          map.removeLayer(layer);

          delete added_asset_layers[layer_id];
        }
      }
    });

  });